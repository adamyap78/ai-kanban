<div class="mb-6">
    <div class="flex justify-between items-center mb-4">
        <div class="flex items-center">
            <h1 class="text-3xl font-bold text-primary"><%= board.name %></h1>
        </div>
        
        <div class="flex gap-2">
            <a href="/orgs/<%= organization.slug %>/boards/<%= board.id %>/settings" class="btn btn-neutral btn-sm">Board Settings</a>
        </div>
    </div>
    
    <% if (board.description) { %>
        <p class="text-base-content/70 mb-4 text-lg">
            <%= board.description %>
        </p>
    <% } %>
    
    <% if (locals.flash?.success) { %>
        <div class="alert alert-success mb-4">
            <%= locals.flash.success %>
        </div>
    <% } %>
    
    <% if (locals.flash?.error) { %>
        <div class="alert alert-error mb-4">
            <%= locals.flash.error %>
        </div>
    <% } %>
</div>

<!-- Kanban Board -->
<div class="flex gap-6 overflow-x-auto pb-6 min-h-[600px]">
    <% lists.forEach(list => { %>
        <div class="flex-shrink-0 w-80">
            <!-- List Header -->
            <div class="bg-base-200 rounded-t-lg p-4">
                <div class="flex justify-between items-center mb-2">
                    <h3 class="font-semibold text-lg text-secondary"><%= list.name %></h3>
                    <div class="dropdown dropdown-end">
                        <div tabindex="0" role="button" class="btn btn-ghost btn-sm btn-circle">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01"></path>
                            </svg>
                        </div>
                        <ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] w-52 p-2 shadow">
                            <li><a hx-get="/cards/new?listId=<%= list.id %>" 
                                   hx-target="#cardDetailContent" 
                                   hx-trigger="click"
                                   onclick="document.getElementById('cardDetailModal').showModal()">Add Card</a></li>
                            <li><hr class="my-1"></li>
                            <li><a onclick="editList('<%= list.id %>', '<%= list.name %>')">Edit List</a></li>
                            <li><a onclick="deleteList('<%= list.id %>')" class="text-error">Delete List</a></li>
                        </ul>
                    </div>
                </div>
            </div>
            
            <!-- Cards Container -->
            <div class="bg-base-200 rounded-b-lg p-4 space-y-3 shadow-md drop-zone" 
                 data-list-id="<%= list.id %>"
                 ondragover="handleDragOver(event)"
                 ondrop="handleDrop(event)">
                <% if (cardsByList[list.id] && cardsByList[list.id].length > 0) { %>
                    <% cardsByList[list.id].forEach(card => { %>
                        <%- include('../../partials/card-item', { card }) %>
                    <% }); %>
                <% } else { %>
                    <div class="text-center text-base-content/50 py-8">
                        <svg class="w-12 h-12 mx-auto mb-2 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                        <p>No cards yet</p>
                        <p class="text-sm">Add a card to get started</p>
                    </div>
                <% } %>
                
                <!-- Add Card Button at Bottom -->
                <button id="add-card-button-<%= list.id %>"
                        hx-get="/cards/new?listId=<%= list.id %>" 
                        hx-target="#cardDetailContent" 
                        hx-trigger="click"
                        onclick="document.getElementById('cardDetailModal').showModal()"
                        class="w-full p-3 text-left text-base-content/70 hover:text-base-content hover:bg-base-300 rounded-lg transition-colors group cursor-pointer">
                    <div class="flex items-center gap-2">
                        <svg class="w-4 h-4 group-hover:text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        <span class="text-sm">Add a card</span>
                    </div>
                </button>
            </div>
        </div>
    <% }); %>
    
    <!-- Add List Button -->
    <div class="flex-shrink-0 w-80">
        <button onclick="showAddListModal()" class="w-full h-32 border-2 border-dashed border-base-300 rounded-lg flex flex-col items-center justify-center hover:border-primary hover:bg-primary/5 transition-colors">
            <svg class="w-8 h-8 mb-2 text-base-content/50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            <span class="text-base-content/70 font-medium">Add List</span>
        </button>
    </div>
</div>

<!-- Add List Modal -->
<dialog id="addListModal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg mb-4">Add New List</h3>
        <form method="POST" action="/lists">
            <input type="hidden" name="boardId" value="<%= board.id %>">
            
            <div class="form-control mb-4">
                <label class="label">
                    <span class="label-text">List Name</span>
                </label>
                <input type="text" name="name" class="input input-bordered" placeholder="Enter list name..." required maxlength="100">
            </div>
            
            <div class="modal-action">
                <button type="button" class="btn btn-ghost" onclick="closeAddListModal()">Cancel</button>
                <button type="submit" class="btn btn-primary">Create List</button>
            </div>
        </form>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>


<!-- Card Detail Modal -->
<dialog id="cardDetailModal" class="modal">
    <div class="modal-box max-w-2xl">
        <div id="cardDetailContent">
            <!-- Card details will be loaded here -->
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<script>
// Add List Modal Functions
function showAddListModal() {
    document.getElementById('addListModal').showModal();
}

function closeAddListModal() {
    document.getElementById('addListModal').close();
}


// Card Detail Functions - now handled by htmx

// Drag and Drop Variables
let draggedCard = null;
let draggedFromList = null;

// Sort cards in a list by their position values
function sortCardsByPosition(listElement) {
    const cards = Array.from(listElement.querySelectorAll('[data-card-id]'));
    const addButton = listElement.querySelector('.w-full'); // "Add card" button
    
    // Sort cards by position
    cards.sort((a, b) => {
        const posA = parseFloat(a.dataset.cardPosition || '0');
        const posB = parseFloat(b.dataset.cardPosition || '0');
        return posA - posB;
    });
    
    // Remove all cards from DOM
    cards.forEach(card => card.remove());
    
    // Re-insert cards in correct order (before add button)
    cards.forEach(card => {
        if (addButton) {
            listElement.insertBefore(card, addButton);
        } else {
            listElement.appendChild(card);
        }
    });
    
    console.log('Sorted', cards.length, 'cards in list', listElement.dataset.listId);
}

// Revert a failed card move
function revertCardMove(card, originalList, originalPosition) {
    if (!card || !originalList) return;
    
    console.log('Reverting card move to original position', originalPosition);
    
    // Restore original position data
    card.dataset.cardPosition = originalPosition;
    
    // Move card back to original list
    const originalAddButton = originalList.querySelector('.w-full');
    if (originalAddButton) {
        originalList.insertBefore(card, originalAddButton);
    } else {
        originalList.appendChild(card);
    }
    
    // Re-sort both lists to ensure proper order
    sortCardsByPosition(originalList);
    
    // Also sort the target list if it's different
    const currentList = card.closest('.drop-zone');
    if (currentList && currentList !== originalList) {
        sortCardsByPosition(currentList);
    }
}

// Drag and Drop Functions
function handleDragStart(event) {
    draggedCard = event.target;
    draggedFromList = event.target.closest('.drop-zone');
    
    // Add visual feedback
    event.target.style.opacity = '0.5';
    event.target.classList.add('dragging');
    
    // Store data for the drag operation
    event.dataTransfer.effectAllowed = 'move';
    event.dataTransfer.setData('text/html', event.target.outerHTML);
    
    console.log('Drag started for card:', event.target.dataset.cardId);
}

function handleDragEnd(event) {
    // Clean up visual feedback
    event.target.style.opacity = '';
    event.target.classList.remove('dragging');
    
    // Remove drag-over effects from all drop zones
    document.querySelectorAll('.drop-zone').forEach(zone => {
        zone.classList.remove('drag-over');
    });
    
    console.log('Drag ended');
}

function handleDragOver(event) {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
    
    // Add visual feedback to drop zone
    event.currentTarget.classList.add('drag-over');
}

function handleDrop(event) {
    event.preventDefault();
    
    const dropZone = event.currentTarget;
    const targetListId = dropZone.dataset.listId;
    
    if (!draggedCard || !targetListId) {
        console.error('Invalid drop operation');
        return;
    }
    
    const cardId = draggedCard.dataset.cardId;
    const sourceListId = draggedFromList.dataset.listId;
    const originalPosition = parseFloat(draggedCard.dataset.cardPosition || '1');
    
    // Don't do anything if dropped in same position
    if (sourceListId === targetListId && dropZone.contains(draggedCard)) {
        dropZone.classList.remove('drag-over');
        return;
    }
    
    // Calculate new position
    const cardsInTargetList = Array.from(dropZone.querySelectorAll('[data-card-id]'));
    const dropY = event.clientY;
    let newPosition = 1;
    
    if (cardsInTargetList.length > 0) {
        // Find insertion point based on mouse position
        let insertAfter = null;
        
        for (let i = 0; i < cardsInTargetList.length; i++) {
            const card = cardsInTargetList[i];
            if (card === draggedCard) continue; // Skip the dragged card itself
            
            const rect = card.getBoundingClientRect();
            const cardCenterY = rect.top + rect.height / 2;
            
            if (dropY < cardCenterY) {
                break; // Insert before this card
            }
            insertAfter = card;
        }
        
        if (insertAfter) {
            // Get position of card we're inserting after
            const afterPosition = parseFloat(insertAfter.dataset.cardPosition || '1');
            const nextCard = insertAfter.nextElementSibling;
            
            if (nextCard && nextCard !== draggedCard) {
                // Insert between two cards
                const nextPosition = parseFloat(nextCard.dataset.cardPosition || (afterPosition + 2));
                newPosition = (afterPosition + nextPosition) / 2;
            } else {
                // Insert at end
                newPosition = afterPosition + 1;
            }
        } else {
            // Insert at beginning
            const firstCard = cardsInTargetList.find(card => card !== draggedCard);
            if (firstCard) {
                const firstPosition = parseFloat(firstCard.dataset.cardPosition || '2');
                newPosition = firstPosition / 2;
            }
        }
    }
    
    console.log('Moving card', cardId, 'to list', targetListId, 'at position', newPosition);
    
    // Update the card's position data immediately
    draggedCard.dataset.cardPosition = newPosition;
    
    // Optimistically update the UI
    if (sourceListId !== targetListId) {
        // Cross-list move: move card to target list
        const addButton = dropZone.querySelector('.w-full');
        if (addButton) {
            dropZone.insertBefore(draggedCard, addButton);
        } else {
            dropZone.appendChild(draggedCard);
        }
    }
    
    // Sort cards in affected lists to ensure proper positioning
    sortCardsByPosition(dropZone); // Always sort target list
    if (sourceListId !== targetListId && draggedFromList) {
        sortCardsByPosition(draggedFromList); // Sort source list if different
    }
    
    // Make API call to update backend
    fetch(`/cards/${cardId}/move`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            listId: targetListId,
            position: newPosition
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('Card moved successfully');
            // Position data already updated above, all good!
        } else {
            console.error('Failed to move card:', data.error);
            // Revert the changes
            revertCardMove(draggedCard, draggedFromList, originalPosition);
        }
    })
    .catch(error => {
        console.error('Error moving card:', error);
        // Revert the changes  
        revertCardMove(draggedCard, draggedFromList, originalPosition);
    })
    .finally(() => {
        // Clean up
        dropZone.classList.remove('drag-over');
        draggedCard = null;
        draggedFromList = null;
    });
}

// List Management Functions
function editList(listId, currentName) {
    const newName = prompt('Enter new list name:', currentName);
    if (newName && newName !== currentName) {
        fetch(`/lists/${listId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name: newName })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Failed to update list: ' + (data.error || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to update list');
        });
    }
}

function deleteList(listId) {
    if (confirm('Are you sure you want to delete this list? This will also delete all cards in the list.')) {
        fetch(`/lists/${listId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Failed to delete list: ' + (data.error || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to delete list');
        });
    }
}

</script>