<div class="mb-6">
    <div class="flex justify-between items-center mb-4">
        <div class="flex items-center">
            <h1 class="text-3xl font-bold text-primary"><%= board.name %></h1>
        </div>
        
        <div class="flex gap-2">
            <button onclick="document.getElementById('chatModal').showModal()" class="btn btn-primary btn-sm">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 3.582-8 8-8s8 3.582 8 8z"></path>
                </svg>
                Chat
            </button>
            <a href="/orgs/<%= organization.slug %>/boards/<%= board.id %>/settings" class="btn btn-neutral btn-sm">Board Settings</a>
        </div>
    </div>
    
    <% if (board.description) { %>
        <p class="text-base-content/70 mb-4 text-lg">
            <%= board.description %>
        </p>
    <% } %>
    
    <% if (locals.flash?.success) { %>
        <div class="alert alert-success mb-4">
            <%= locals.flash.success %>
        </div>
    <% } %>
    
    <% if (locals.flash?.error) { %>
        <div class="alert alert-error mb-4">
            <%= locals.flash.error %>
        </div>
    <% } %>
</div>

<!-- Kanban Board -->
<div class="flex gap-6 overflow-x-auto pb-6 min-h-[600px] list-drop-zone" 
     ondragover="handleListDragOver(event)" 
     ondrop="handleListDrop(event)">
    <% lists.forEach(list => { %>
        <div class="flex-shrink-0 w-80 list-container" 
             data-list-id="<%= list.id %>"
             data-list-position="<%= list.position %>">
            <!-- List Header -->
            <div class="bg-base-200 rounded-t-lg p-4 list-drag-handle" 
                 draggable="true"
                 ondragstart="handleListDragStart(event)"
                 ondragend="handleListDragEnd(event)"
                 ondragover="event.preventDefault()">
                <div class="flex justify-between items-center mb-2">
                    <div class="flex items-center gap-2">
                        <svg class="w-4 h-4 text-base-content/50 cursor-grab" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path>
                        </svg>
                        <h3 class="font-semibold text-lg text-secondary"><%= list.name %></h3>
                    </div>
                    <div class="dropdown dropdown-end">
                        <div tabindex="0" role="button" class="btn btn-ghost btn-sm btn-circle">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01"></path>
                            </svg>
                        </div>
                        <ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] w-52 p-2 shadow">
                            <li><a hx-get="/cards/new?listId=<%= list.id %>" 
                                   hx-target="#cardDetailContent" 
                                   hx-trigger="click"
                                   onclick="document.getElementById('cardDetailModal').showModal()">Add Card</a></li>
                            <li><hr class="my-1"></li>
                            <li><a onclick="editList('<%= list.id %>', '<%= list.name %>')">Edit List</a></li>
                            <li><a onclick="deleteList('<%= list.id %>')" class="text-error">Delete List</a></li>
                        </ul>
                    </div>
                </div>
            </div>
            
            <!-- Cards Container -->
            <div class="bg-base-200 rounded-b-lg p-4 space-y-3 shadow-md drop-zone" 
                 data-list-id="<%= list.id %>"
                 ondragover="handleDragOver(event)"
                 ondrop="handleDrop(event)">
                <% if (cardsByList[list.id] && cardsByList[list.id].length > 0) { %>
                    <% cardsByList[list.id].forEach(card => { %>
                        <%- include('../../partials/card-item', { card }) %>
                    <% }); %>
                <% } %>
                
                <!-- Add Card Button at Bottom -->
                <button id="add-card-button-<%= list.id %>"
                        hx-get="/cards/new?listId=<%= list.id %>" 
                        hx-target="#cardDetailContent" 
                        hx-trigger="click"
                        onclick="document.getElementById('cardDetailModal').showModal()"
                        class="w-full p-3 text-left text-base-content/70 hover:text-base-content hover:bg-base-300 rounded-lg transition-colors group cursor-pointer">
                    <div class="flex items-center gap-2">
                        <svg class="w-4 h-4 group-hover:text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        <span class="text-sm">Add a card</span>
                    </div>
                </button>
            </div>
        </div>
    <% }); %>
    
    <!-- Add List Button -->
    <div class="flex-shrink-0 w-80" draggable="false">
        <button onclick="showAddListModal()" draggable="false" class="w-full h-32 border-2 border-dashed border-base-300 rounded-lg flex flex-col items-center justify-center hover:border-primary hover:bg-primary/5 transition-colors">
            <svg class="w-8 h-8 mb-2 text-base-content/50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            <span class="text-base-content/70 font-medium">Add List</span>
        </button>
    </div>
</div>

<!-- Add List Modal -->
<dialog id="addListModal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg mb-4">Add New List</h3>
        <form method="POST" action="/lists">
            <input type="hidden" name="boardId" value="<%= board.id %>">
            
            <div class="form-control mb-4">
                <label class="label">
                    <span class="label-text">List Name</span>
                </label>
                <input type="text" name="name" class="input input-bordered" placeholder="Enter list name..." required maxlength="100">
            </div>
            
            <div class="modal-action">
                <button type="button" class="btn btn-ghost" onclick="closeAddListModal()">Cancel</button>
                <button type="submit" class="btn btn-primary">Create List</button>
            </div>
        </form>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>


<!-- Card Detail Modal -->
<dialog id="cardDetailModal" class="modal">
    <div class="modal-box max-w-2xl">
        <div id="cardDetailContent">
            <!-- Card details will be loaded here -->
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<script>
// Add List Modal Functions
function showAddListModal() {
    document.getElementById('addListModal').showModal();
}

function closeAddListModal() {
    document.getElementById('addListModal').close();
}


// Card Detail Functions - now handled by htmx

// Drag and Drop Variables
let draggedCard = null;
let draggedFromList = null;

// Sort cards in a list by their position values
function sortCardsByPosition(listElement) {
    const cards = Array.from(listElement.querySelectorAll('[data-card-id]'));
    const addButton = listElement.querySelector('.w-full'); // "Add card" button
    
    // Sort cards by position
    cards.sort((a, b) => {
        const posA = parseFloat(a.dataset.cardPosition || '0');
        const posB = parseFloat(b.dataset.cardPosition || '0');
        return posA - posB;
    });
    
    // Remove all cards from DOM
    cards.forEach(card => card.remove());
    
    // Re-insert cards in correct order (before add button)
    cards.forEach(card => {
        if (addButton) {
            listElement.insertBefore(card, addButton);
        } else {
            listElement.appendChild(card);
        }
    });
    
    console.log('Sorted', cards.length, 'cards in list', listElement.dataset.listId);
}

// Revert a failed card move
function revertCardMove(card, originalList, originalPosition) {
    if (!card || !originalList) return;
    
    console.log('Reverting card move to original position', originalPosition);
    
    // Restore original position data
    card.dataset.cardPosition = originalPosition;
    
    // Move card back to original list
    const originalAddButton = originalList.querySelector('.w-full');
    if (originalAddButton) {
        originalList.insertBefore(card, originalAddButton);
    } else {
        originalList.appendChild(card);
    }
    
    // Re-sort both lists to ensure proper order
    sortCardsByPosition(originalList);
    
    // Also sort the target list if it's different
    const currentList = card.closest('.drop-zone');
    if (currentList && currentList !== originalList) {
        sortCardsByPosition(currentList);
    }
}

// Drag and Drop Functions
function handleDragStart(event) {
    draggedCard = event.target;
    draggedFromList = event.target.closest('.drop-zone');
    
    // Add visual feedback
    event.target.style.opacity = '0.5';
    event.target.classList.add('dragging');
    
    // Store data for the drag operation
    event.dataTransfer.effectAllowed = 'move';
    event.dataTransfer.setData('text/html', event.target.outerHTML);
    
    console.log('Drag started for card:', event.target.dataset.cardId);
}

function handleDragEnd(event) {
    // Clean up visual feedback
    event.target.style.opacity = '';
    event.target.classList.remove('dragging');
    
    // Remove drag-over effects from all drop zones
    document.querySelectorAll('.drop-zone').forEach(zone => {
        zone.classList.remove('drag-over');
    });
    
    // Remove list-drag-over effects from board (in case card drag triggered it)
    document.querySelectorAll('.list-drop-zone').forEach(zone => {
        zone.classList.remove('list-drag-over');
    });
    
    console.log('Drag ended');
}

function handleDragOver(event) {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
    
    // Add visual feedback to drop zone
    event.currentTarget.classList.add('drag-over');
}

function handleDrop(event) {
    event.preventDefault();
    event.stopPropagation(); // Prevent bubbling to list drop handler
    
    const dropZone = event.currentTarget;
    const targetListId = dropZone.dataset.listId;
    
    if (!draggedCard || !targetListId) {
        console.error('Invalid drop operation');
        return;
    }
    
    const cardId = draggedCard.dataset.cardId;
    const sourceListId = draggedFromList.dataset.listId;
    const originalPosition = parseFloat(draggedCard.dataset.cardPosition || '1');
    
    // Calculate new position first
    const cardsInTargetList = Array.from(dropZone.querySelectorAll('[data-card-id]'));
    const dropY = event.clientY;
    let newPosition = 1;
    
    if (cardsInTargetList.length > 0) {
        // Find insertion point based on mouse position
        let insertAfter = null;
        
        for (let i = 0; i < cardsInTargetList.length; i++) {
            const card = cardsInTargetList[i];
            if (card === draggedCard) continue; // Skip the dragged card itself
            
            const rect = card.getBoundingClientRect();
            const cardCenterY = rect.top + rect.height / 2;
            
            if (dropY < cardCenterY) {
                break; // Insert before this card
            }
            insertAfter = card;
        }
        
        if (insertAfter) {
            // Get position of card we're inserting after
            const afterPosition = parseFloat(insertAfter.dataset.cardPosition || '1');
            const nextCard = insertAfter.nextElementSibling;
            
            if (nextCard && nextCard !== draggedCard) {
                // Insert between two cards
                const nextPosition = parseFloat(nextCard.dataset.cardPosition || (afterPosition + 2));
                newPosition = (afterPosition + nextPosition) / 2;
            } else {
                // Insert at end
                newPosition = afterPosition + 1;
            }
        } else {
            // Insert at beginning
            const firstCard = cardsInTargetList.find(card => card !== draggedCard);
            if (firstCard) {
                const firstPosition = parseFloat(firstCard.dataset.cardPosition || '2');
                newPosition = firstPosition / 2;
            }
        }
    }
    
    // Don't do anything if dropped in the exact same position
    if (sourceListId === targetListId && Math.abs(originalPosition - newPosition) < 0.001) {
        console.log('Card dropped in same position, no move needed');
        dropZone.classList.remove('drag-over');
        return;
    }
    
    console.log('Moving card', cardId, 'to list', targetListId, 'at position', newPosition);
    
    // Update the card's position data immediately
    draggedCard.dataset.cardPosition = newPosition;
    
    // Optimistically update the UI
    if (sourceListId !== targetListId) {
        // Cross-list move: move card to target list
        const addButton = dropZone.querySelector('.w-full');
        if (addButton) {
            dropZone.insertBefore(draggedCard, addButton);
        } else {
            dropZone.appendChild(draggedCard);
        }
    }
    
    // Sort cards in affected lists to ensure proper positioning
    sortCardsByPosition(dropZone); // Always sort target list
    if (sourceListId !== targetListId && draggedFromList) {
        sortCardsByPosition(draggedFromList); // Sort source list if different
    }
    
    // Make API call to update backend
    fetch(`/cards/${cardId}/move`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            listId: targetListId,
            position: newPosition
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('Card moved successfully');
            // Position data already updated above, all good!
        } else {
            console.error('Failed to move card:', data.error);
            // Revert the changes
            revertCardMove(draggedCard, draggedFromList, originalPosition);
        }
    })
    .catch(error => {
        console.error('Error moving card:', error);
        // Revert the changes  
        revertCardMove(draggedCard, draggedFromList, originalPosition);
    })
    .finally(() => {
        // Clean up
        dropZone.classList.remove('drag-over');
        draggedCard = null;
        draggedFromList = null;
    });
}

// List Drag and Drop Variables
let draggedList = null;
let draggedFromBoard = null;

// Sort lists by their position values
function sortListsByPosition(boardElement) {
    const lists = Array.from(boardElement.querySelectorAll('.list-container'));
    
    // Sort lists by position
    lists.sort((a, b) => {
        const posA = parseFloat(a.dataset.listPosition || '0');
        const posB = parseFloat(b.dataset.listPosition || '0');
        return posA - posB;
    });
    
    // Remove all lists from DOM
    lists.forEach(list => list.remove());
    
    // Re-insert lists in correct order
    lists.forEach(list => {
        boardElement.appendChild(list);
    });
    
    console.log('Sorted', lists.length, 'lists in board');
}

// List Drag and Drop Functions
function handleListDragStart(event) {
    // The drag started from the drag handle, so we need to find the list container
    draggedList = event.target.closest('.list-container');
    draggedFromBoard = draggedList.parentElement;
    
    // Add visual feedback to the list container
    draggedList.style.opacity = '0.5';
    draggedList.classList.add('list-dragging');
    
    // Store data for the drag operation
    event.dataTransfer.effectAllowed = 'move';
    event.dataTransfer.setData('text/html', event.target.outerHTML);
    
    console.log('List drag started for:', draggedList.dataset.listId);
}

function handleListDragEnd(event) {
    // Clean up visual feedback from the list container
    if (draggedList) {
        draggedList.style.opacity = '';
        draggedList.classList.remove('list-dragging');
    }
    
    // Remove drag-over effects from board
    document.querySelectorAll('.list-drop-zone').forEach(zone => {
        zone.classList.remove('list-drag-over');
    });
    
    console.log('List drag ended');
}

function handleListDragOver(event) {
    event.preventDefault();
    
    // Only show list drag feedback if we're actually dragging a list
    if (!draggedList || draggedCard) {
        return; // Exit if dragging a card instead of a list
    }
    
    event.dataTransfer.dropEffect = 'move';
    
    // Add visual feedback to board
    event.currentTarget.classList.add('list-drag-over');
}

function handleListDrop(event) {
    event.preventDefault();
    
    const boardDropZone = event.currentTarget;
    
    // Only handle if we're actually dragging a list, not a card
    if (!draggedList || draggedCard) {
        return; // Exit silently if this is a card drag or no list being dragged
    }
    
    const listId = draggedList.dataset.listId;
    const originalPosition = parseFloat(draggedList.dataset.listPosition || '1');
    
    // Calculate new position based on horizontal drop position
    const listsInBoard = Array.from(boardDropZone.querySelectorAll('.list-container'));
    const dropX = event.clientX;
    let newPosition = 1;
    
    // Filter out the dragged list itself for position calculation
    const otherLists = listsInBoard.filter(list => list !== draggedList);
    
    if (otherLists.length > 0) {
        // Find insertion point based on mouse position
        let insertAfter = null;
        
        for (let i = 0; i < otherLists.length; i++) {
            const list = otherLists[i];
            
            const rect = list.getBoundingClientRect();
            const listCenterX = rect.left + rect.width / 2;
            
            if (dropX < listCenterX) {
                break; // Insert before this list
            }
            insertAfter = list;
        }
        
        if (insertAfter) {
            // Get position of list we're inserting after
            const afterPosition = parseFloat(insertAfter.dataset.listPosition || '1');
            
            // Find the next list in our filtered array
            const afterIndex = otherLists.indexOf(insertAfter);
            const nextList = otherLists[afterIndex + 1];
            
            if (nextList) {
                // Insert between two lists
                const nextPosition = parseFloat(nextList.dataset.listPosition || (afterPosition + 2));
                newPosition = (afterPosition + nextPosition) / 2;
            } else {
                // Insert at end
                newPosition = afterPosition + 1;
            }
        } else {
            // Insert at beginning
            if (otherLists.length > 0) {
                const firstList = otherLists[0];
                const firstPosition = parseFloat(firstList.dataset.listPosition || '2');
                newPosition = firstPosition / 2;
            }
        }
    }
    
    // Don't do anything if dropped in the exact same position
    if (Math.abs(originalPosition - newPosition) < 0.001) {
        console.log('List dropped in same position, no move needed');
        boardDropZone.classList.remove('list-drag-over');
        return;
    }
    
    console.log('Moving list', listId, 'to position', newPosition);
    console.log('Other lists in board:', otherLists.length);
    console.log('Drop X:', dropX);
    console.log('Original position:', originalPosition, 'New position:', newPosition);
    
    // Update the list's position data immediately
    draggedList.dataset.listPosition = newPosition;
    
    // Sort lists to ensure proper positioning
    sortListsByPosition(boardDropZone);
    
    // Make API call to update backend
    fetch(`/lists/${listId}/position`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            position: newPosition
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('List moved successfully, refreshing page...');
            location.reload();
        } else {
            console.error('Failed to move list:', data.error);
            alert('Failed to move list: ' + (data.error || 'Unknown error'));
            location.reload(); // Refresh to reset the UI
        }
    })
    .catch(error => {
        console.error('Error moving list:', error);
        alert('Failed to move list');
        location.reload(); // Refresh to reset the UI
    })
    .finally(() => {
        // Clean up
        boardDropZone.classList.remove('list-drag-over');
        draggedList = null;
        draggedFromBoard = null;
    });
}

// Card Management Functions
function deleteCardAndRefresh(cardId) {
    if (confirm('Are you sure you want to delete this card? This action cannot be undone.')) {
        fetch(`/cards/${cardId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('Card deleted successfully, refreshing page...');
                location.reload();
            } else {
                console.error('Failed to delete card:', data.error);
                alert('Failed to delete card: ' + (data.error || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error deleting card:', error);
            alert('Failed to delete card');
        });
    }
}

// List Management Functions
function editList(listId, currentName) {
    const newName = prompt('Enter new list name:', currentName);
    if (newName && newName !== currentName) {
        fetch(`/lists/${listId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name: newName })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Failed to update list: ' + (data.error || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to update list');
        });
    }
}

function deleteList(listId) {
    if (confirm('Are you sure you want to delete this list? This will also delete all cards in the list.')) {
        fetch(`/lists/${listId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Failed to delete list: ' + (data.error || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to delete list');
        });
    }
}

</script>

<!-- Chat Modal -->
<dialog id="chatModal" class="modal">
    <div class="modal-box max-w-2xl h-96 flex flex-col">
        <div class="flex justify-between items-center mb-4">
            <h3 class="font-bold text-lg">AI Assistant</h3>
            <button class="btn btn-sm btn-circle btn-ghost" onclick="document.getElementById('chatModal').close()">✕</button>
        </div>
        
        <!-- Chat Messages Container -->
        <div id="chatMessages" class="flex-1 overflow-y-auto mb-4 space-y-3 max-h-64">
            <div class="chat chat-start">
                <div class="chat-bubble chat-bubble-primary">
                    Hi! I'm your AI assistant. How can I help you today?
                </div>
            </div>
        </div>
        
        <!-- Chat Input -->
        <div class="flex gap-2">
            <input type="text" id="chatInput" placeholder="Type your message..." class="input input-bordered flex-1" onkeypress="handleChatKeyPress(event)">
            <button onclick="sendChatMessage()" class="btn btn-primary" id="sendButton">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                </svg>
            </button>
        </div>
        
        <!-- Loading indicator -->
        <div id="chatLoading" class="hidden mt-2">
            <div class="chat chat-start">
                <div class="chat-bubble bg-base-200">
                    <span class="loading loading-dots loading-sm"></span>
                </div>
            </div>
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<script>
// Chat functionality
let chatMessages = [];

function handleChatKeyPress(event) {
    if (event.key === 'Enter') {
        sendChatMessage();
    }
}

function sendChatMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();
    
    if (!message) return;
    
    // Clear input and disable button
    input.value = '';
    const sendButton = document.getElementById('sendButton');
    sendButton.disabled = true;
    
    // Add user message to UI
    addMessageToUI('user', message);
    
    // Add user message to conversation
    chatMessages.push({ role: 'user', content: message });
    
    // Try streaming first, fallback to regular POST if it fails
    sendChatMessageStreaming()
        .catch(error => {
            console.warn('Streaming failed, falling back to regular request:', error);
            sendChatMessageRegular();
        })
        .finally(() => {
            // Re-enable send button
            sendButton.disabled = false;
        });
}

function sendChatMessageStreaming() {
    return new Promise((resolve, reject) => {
        // Show typing indicator instead of loading dots
        document.getElementById('chatLoading').classList.remove('hidden');
        const loadingBubble = document.querySelector('#chatLoading .chat-bubble');
        loadingBubble.innerHTML = '<span class="loading loading-dots loading-sm"></span> Thinking...';
        
        // Create streaming AI message container
        const streamingMessageId = 'streaming-message-' + Date.now();
        addStreamingMessageToUI(streamingMessageId);
        
        // Build SSE URL with messages as query parameter
        const messagesParam = encodeURIComponent(JSON.stringify(chatMessages));
        const eventSource = new EventSource(`/api/chat/stream?messages=${messagesParam}`);
        
        let streamedContent = '';
        let hasError = false;
        
        eventSource.onmessage = function(event) {
            try {
                const data = JSON.parse(event.data);
                
                if (data.type === 'content') {
                    streamedContent += data.content;
                    updateStreamingMessage(streamingMessageId, streamedContent);
                } else if (data.type === 'complete') {
                    // Hide loading indicator
                    document.getElementById('chatLoading').classList.add('hidden');
                    
                    // Finalize the streaming message (remove cursor)
                    finalizeStreamingMessage(streamingMessageId);
                    
                    // Add completed message to conversation history
                    chatMessages.push({ role: 'assistant', content: streamedContent });
                    
                    eventSource.close();
                    resolve();
                } else if (data.type === 'error') {
                    hasError = true;
                    // Hide loading indicator
                    document.getElementById('chatLoading').classList.add('hidden');
                    
                    // Remove streaming message and show error
                    removeStreamingMessage(streamingMessageId);
                    addMessageToUI('assistant', 'Sorry, I encountered an error. Please try again.');
                    
                    eventSource.close();
                    reject(new Error(data.error || 'Streaming error'));
                }
            } catch (parseError) {
                console.error('Error parsing SSE data:', parseError);
            }
        };
        
        eventSource.onerror = function(event) {
            console.error('SSE connection error:', event);
            
            // Hide loading indicator
            document.getElementById('chatLoading').classList.add('hidden');
            
            if (!hasError) {
                // Remove streaming message
                removeStreamingMessage(streamingMessageId);
            }
            
            eventSource.close();
            reject(new Error('SSE connection failed'));
        };
        
        // Set timeout for streaming requests
        setTimeout(() => {
            if (eventSource.readyState !== EventSource.CLOSED) {
                eventSource.close();
                if (!hasError) {
                    removeStreamingMessage(streamingMessageId);
                }
                reject(new Error('Streaming timeout'));
            }
        }, 30000); // 30 second timeout
    });
}

function sendChatMessageRegular() {
    // Show loading indicator
    document.getElementById('chatLoading').classList.remove('hidden');
    const loadingBubble = document.querySelector('#chatLoading .chat-bubble');
    loadingBubble.innerHTML = '<span class="loading loading-dots loading-sm"></span>';
    
    // Send to API using original method
    fetch('/api/chat', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ messages: chatMessages })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        // Hide loading indicator
        document.getElementById('chatLoading').classList.add('hidden');
        
        if (data.choices && data.choices[0] && data.choices[0].message) {
            const assistantMessage = data.choices[0].message;
            
            // Add AI response to conversation
            chatMessages.push(assistantMessage);
            
            // Add AI response to UI
            addMessageToUI('assistant', assistantMessage.content);
        } else {
            throw new Error('Invalid response format');
        }
    })
    .catch(error => {
        console.error('Chat error:', error);
        
        // Hide loading indicator
        document.getElementById('chatLoading').classList.add('hidden');
        
        // Show error message
        addMessageToUI('assistant', 'Sorry, I encountered an error. Please try again.');
    });
}

function addMessageToUI(role, content) {
    const messagesContainer = document.getElementById('chatMessages');
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat ${role === 'user' ? 'chat-end' : 'chat-start'}`;
    
    const bubbleDiv = document.createElement('div');
    bubbleDiv.className = `chat-bubble ${role === 'user' ? 'chat-bubble-secondary' : 'chat-bubble-primary'}`;
    bubbleDiv.textContent = content;
    
    messageDiv.appendChild(bubbleDiv);
    messagesContainer.appendChild(messageDiv);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function addStreamingMessageToUI(messageId) {
    const messagesContainer = document.getElementById('chatMessages');
    
    const messageDiv = document.createElement('div');
    messageDiv.id = messageId;
    messageDiv.className = 'chat chat-start';
    
    const bubbleDiv = document.createElement('div');
    bubbleDiv.className = 'chat-bubble chat-bubble-primary';
    bubbleDiv.textContent = ''; // Start empty
    
    // Add cursor effect
    const cursorSpan = document.createElement('span');
    cursorSpan.className = 'animate-pulse';
    cursorSpan.textContent = '▋';
    bubbleDiv.appendChild(cursorSpan);
    
    messageDiv.appendChild(bubbleDiv);
    messagesContainer.appendChild(messageDiv);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function updateStreamingMessage(messageId, content) {
    const messageElement = document.getElementById(messageId);
    if (!messageElement) return;
    
    const bubbleDiv = messageElement.querySelector('.chat-bubble');
    if (!bubbleDiv) return;
    
    // Update content while preserving cursor
    const cursorSpan = bubbleDiv.querySelector('.animate-pulse');
    bubbleDiv.textContent = content;
    
    // Re-add cursor
    if (cursorSpan) {
        bubbleDiv.appendChild(cursorSpan);
    }
    
    // Scroll to bottom
    const messagesContainer = document.getElementById('chatMessages');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function removeStreamingMessage(messageId) {
    const messageElement = document.getElementById(messageId);
    if (messageElement) {
        messageElement.remove();
    }
}

function finalizeStreamingMessage(messageId) {
    const messageElement = document.getElementById(messageId);
    if (!messageElement) return;
    
    const bubbleDiv = messageElement.querySelector('.chat-bubble');
    if (!bubbleDiv) return;
    
    // Remove cursor and finalize message
    const cursorSpan = bubbleDiv.querySelector('.animate-pulse');
    if (cursorSpan) {
        cursorSpan.remove();
    }
    
    // Remove the ID so it becomes a regular message
    messageElement.removeAttribute('id');
}
</script>